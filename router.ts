//router.ts
import homeView from "./src/ts/views/home-view/home-view"
import Button from "./src/ts/components/button/button"
import HomeContainer from "./src/ts/containers/home-container/home-container"
import logView from "./src/ts/views/log-view/log-view";
import header from "./src/ts/layout/header/header";
/* 

    c'est ici que vous allez g√©rer la logique de routage autrement dit la logique qui en fonction de la valeur de window.location.hash donc la valeur du fragment dans l'url (le fragment commen√ßant par #) 

    on est dans cette situation alg√©brique est la suivante :  
    f(window.location.hash) = la vue qui √™tre pr√©sent√©e √† l'utilisateur
    ou f: window.location.hash -> une vue sp√©cifique
    
    une vue est une interface utilisateur 

    d'o√π le dossier views

*/

// avec TS je peux d√©finir un type
type OnNavigateType = (h: string) => void

declare global {
  interface Window {
    onNavigate: OnNavigateType
  }
}

window.onNavigate = navigateToPage

// cette fonction va √™tre utilis√©e au moment du d√©marrage de l'application √† l'int√©rieur de la fonction anonyme ci-dessous
function navigateToPage(h: string): void {
  //on veut r√©cup√©rer dans une fonction la seule div qui est √©crite "en dur" dans l'index.html . Pourquoi ? Parce que c'est √† l'int√©rieur d'elle dans son innerHTML que l'on veut faire vivre notre application et dynamiser l'application en passe d'une vue √† une autre. Autrement dit les diff√©rentes pages/vues de l'application seront entre <div id="root"> et </div>
  console.log("h", h)
  // Encore faut-il r√©cup√©rer l'√©l√©ment html ayant l'id root dans une variable pour changer son contenu avec la vue qui est fonction de la valeur de h

  // je d√©finis donc une variable qui aura un nom coh√©rent √† son contenu
  const root = document.getElementById("root") as HTMLElement

  // le membre de droit de l'assignation EST l'√©l√©ment HTML ayant pour id root et donc le fait d'assigner cette valeur √† la variable root fait de cette derni√®re l'√©l√©ment HTML ayant un id root

  // rajoutant as HTMLElement je force le programme a consid√©r√© que cet √©l√©ment HTML a bel et bien une existance r√©elle ce qui n'est pas principe pas forc√©ment le cas puisque j'aurais tr√®s bien pu √©crire une ineptie en me trompant d'identifiant

  // vu que cette fonction ne va pas √™tre ex√©cut√© uniquement au d√©marrage de l'application mais √©galement quand l'url va changer via les ancres <a href=""></a> notamment je dois vider le contenu de la div car une autre vue aurait pu s'y trouver comme la home-view ou la log-view ou la not-found-view

  root.innerHTML = "" // je vide le contenu de l'√©lement HTML ayant root comme id
  root.innerHTML += header() // Bonjour
  // √† ce niveau j'aurai et je mettrai √† un moment donn√© les √©l√©ments de layout qui ne d√©pendent pas d'une vue particuli√®re et qui doivent √™tre pr√©sents quelle que soit la page / la vue

  // par exemple header et le composant qui contiendra mes messages de notification aux utilisateurs

  // h est le param√®tre unique qu'accepte cette fonction
  // sa valeur sera appel√©e un argument
  // en fonction de sa valeur on va router l'utilisateur vers une vue particuli√®re

  switch (h) {
    case "":
      // ici c'est le cas o√π il n'y a pas de hash autrement dit on est sur la page racine de l'application
      console.log("üü¢ page racine") // les console.log sont nos fa√ßons de v√©rifier des informations

      // j'ai cr√©√© une vue home-view elle est suppos√©e √™tre ce que l'utilisateur voit lorsqu'il est √† la racine de l'application (quand l'application d√©marrage)

      // donc on va consid√©rer que le contenu de l'√©l√©ment HTML ayant l'id root sera cette vue home-view

      root.innerHTML += homeView()
      new HomeContainer(window.onNavigate)

      break // le break √©vite qu'on bascule dans le cas suivant et que donc on ex√©cute les instructions du cas suivant
    case "#login":
      // ici on veut afficher la vue qui correspond √† la page de connexion
      console.log("üü¢ page login")
      root.innerHTML += logView()
      break;
    default:
      // il s'agit du cas par d√©fault si h n'a aucune des valeurs d√©finis par les cas ci-dessus
      console.log("üî¥ 404 not found")
      break
  }
}

// lorsque l'url est modifi√©e un √©v√©nement de la fen√™te ouverte survient c'est le popstate
// Nous on veut que lorsque l'url change par exemple lorsqu'on passe de http://localhost:8080 √† http://localhost:8080/#login que la fonction navigateToPage() soit appel√©e autrement dit qu'elle s'ex√©cute

// donc nous le disons ci-dessous
window.onpopstate = function () {
  // cela veut dire qu'au moment o√π popstate est d√©clench√©e (triggered) alors on va appeler la fonction en lui passe le nouveau hash si on prend l'exemple ci-dessus cela sera #login
  navigateToPage(window.location.hash) // #login est pass√© comme argument √† la fonction navigateToPage
}

// cette fonction anonyme elle n'a pas de nom et qui est l'export default de ce fichier
// va s'ex√©cuter au moment du lancement de l'application et UNIQUEMENT √† ce moment
export default function () {
  navigateToPage(window.location.hash)
}
